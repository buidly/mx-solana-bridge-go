// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package bridge

import (
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
)

type Secp256k1Pubkey struct {
	Bytes [64]uint8
}

func (obj Secp256k1Pubkey) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Bytes` param:
	err = encoder.Encode(obj.Bytes)
	if err != nil {
		return err
	}
	return nil
}

func (obj *Secp256k1Pubkey) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Bytes`:
	err = decoder.Decode(&obj.Bytes)
	if err != nil {
		return err
	}
	return nil
}

type Secp256k1Signature struct {
	Bytes [64]uint8
}

func (obj Secp256k1Signature) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Bytes` param:
	err = encoder.Encode(obj.Bytes)
	if err != nil {
		return err
	}
	return nil
}

func (obj *Secp256k1Signature) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Bytes`:
	err = decoder.Decode(&obj.Bytes)
	if err != nil {
		return err
	}
	return nil
}

type TransferSignature struct {
	RecoveryId uint8
	Signature  Secp256k1Signature
}

func (obj TransferSignature) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `RecoveryId` param:
	err = encoder.Encode(obj.RecoveryId)
	if err != nil {
		return err
	}
	// Serialize `Signature` param:
	err = encoder.Encode(obj.Signature)
	if err != nil {
		return err
	}
	return nil
}

func (obj *TransferSignature) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `RecoveryId`:
	err = decoder.Decode(&obj.RecoveryId)
	if err != nil {
		return err
	}
	// Deserialize `Signature`:
	err = decoder.Decode(&obj.Signature)
	if err != nil {
		return err
	}
	return nil
}

type TransferRequest struct {
	Amount       uint64
	DepositNonce ag_binary.Uint128
	Signatures   []TransferSignature
}

func (obj TransferRequest) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Amount` param:
	err = encoder.Encode(obj.Amount)
	if err != nil {
		return err
	}
	// Serialize `DepositNonce` param:
	err = encoder.Encode(obj.DepositNonce)
	if err != nil {
		return err
	}
	// Serialize `Signatures` param:
	err = encoder.Encode(obj.Signatures)
	if err != nil {
		return err
	}
	return nil
}

func (obj *TransferRequest) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Amount`:
	err = decoder.Decode(&obj.Amount)
	if err != nil {
		return err
	}
	// Deserialize `DepositNonce`:
	err = decoder.Decode(&obj.DepositNonce)
	if err != nil {
		return err
	}
	// Deserialize `Signatures`:
	err = decoder.Decode(&obj.Signatures)
	if err != nil {
		return err
	}
	return nil
}

type AdminSettings struct {
	AdminAuthority ag_solanago.PublicKey
}

func (obj AdminSettings) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `AdminAuthority` param:
	err = encoder.Encode(obj.AdminAuthority)
	if err != nil {
		return err
	}
	return nil
}

func (obj *AdminSettings) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `AdminAuthority`:
	err = decoder.Decode(&obj.AdminAuthority)
	if err != nil {
		return err
	}
	return nil
}

type PausableSettings struct {
	IsPaused bool
}

func (obj PausableSettings) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `IsPaused` param:
	err = encoder.Encode(obj.IsPaused)
	if err != nil {
		return err
	}
	return nil
}

func (obj *PausableSettings) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `IsPaused`:
	err = decoder.Decode(&obj.IsPaused)
	if err != nil {
		return err
	}
	return nil
}

type QuorumSettings struct {
	Quorum uint32
}

func (obj QuorumSettings) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Quorum` param:
	err = encoder.Encode(obj.Quorum)
	if err != nil {
		return err
	}
	return nil
}

func (obj *QuorumSettings) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Quorum`:
	err = decoder.Decode(&obj.Quorum)
	if err != nil {
		return err
	}
	return nil
}

type RelayerDetails struct {
	SolanaAddress ag_solanago.PublicKey
	SecpAddress   Secp256k1Pubkey
}

func (obj RelayerDetails) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `SolanaAddress` param:
	err = encoder.Encode(obj.SolanaAddress)
	if err != nil {
		return err
	}
	// Serialize `SecpAddress` param:
	err = encoder.Encode(obj.SecpAddress)
	if err != nil {
		return err
	}
	return nil
}

func (obj *RelayerDetails) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `SolanaAddress`:
	err = decoder.Decode(&obj.SolanaAddress)
	if err != nil {
		return err
	}
	// Deserialize `SecpAddress`:
	err = decoder.Decode(&obj.SecpAddress)
	if err != nil {
		return err
	}
	return nil
}

type PausableError ag_binary.BorshEnum

const (
	PausableErrorPaused PausableError = iota
	PausableErrorNotPaused
)

func (value PausableError) String() string {
	switch value {
	case PausableErrorPaused:
		return "Paused"
	case PausableErrorNotPaused:
		return "NotPaused"
	default:
		return ""
	}
}

type RelayerError ag_binary.BorshEnum

const (
	RelayerErrorAddressNotValid RelayerError = iota
	RelayerErrorAlreadyRelayer
	RelayerErrorNotRelayer
	RelayerErrorSignerNotRelayer
)

func (value RelayerError) String() string {
	switch value {
	case RelayerErrorAddressNotValid:
		return "AddressNotValid"
	case RelayerErrorAlreadyRelayer:
		return "AlreadyRelayer"
	case RelayerErrorNotRelayer:
		return "NotRelayer"
	case RelayerErrorSignerNotRelayer:
		return "SignerNotRelayer"
	default:
		return ""
	}
}

type QuorumError ag_binary.BorshEnum

const (
	QuorumErrorQuorumTooLow QuorumError = iota
	QuorumErrorBoardTooSmall
	QuorumErrorNotEnoughSignatures
	QuorumErrorQuorumNotMet
)

func (value QuorumError) String() string {
	switch value {
	case QuorumErrorQuorumTooLow:
		return "QuorumTooLow"
	case QuorumErrorBoardTooSmall:
		return "BoardTooSmall"
	case QuorumErrorNotEnoughSignatures:
		return "NotEnoughSignatures"
	case QuorumErrorQuorumNotMet:
		return "QuorumNotMet"
	default:
		return ""
	}
}

type ExecutedBatchError ag_binary.BorshEnum

const (
	ExecutedBatchErrorAlreadyExecuted ExecutedBatchError = iota
	ExecutedBatchErrorDepositNotInSequence
)

func (value ExecutedBatchError) String() string {
	switch value {
	case ExecutedBatchErrorAlreadyExecuted:
		return "AlreadyExecuted"
	case ExecutedBatchErrorDepositNotInSequence:
		return "DepositNotInSequence"
	default:
		return ""
	}
}

type ExecutedTransferError ag_binary.BorshEnum

const (
	ExecutedTransferErrorInvalidSignature ExecutedTransferError = iota
)

func (value ExecutedTransferError) String() string {
	switch value {
	case ExecutedTransferErrorInvalidSignature:
		return "InvalidSignature"
	default:
		return ""
	}
}

type TransferStatus ag_binary.BorshEnum

const (
	TransferStatusEXECUTED TransferStatus = iota
	TransferStatusREJECTED
)

func (value TransferStatus) String() string {
	switch value {
	case TransferStatusEXECUTED:
		return "EXECUTED"
	case TransferStatusREJECTED:
		return "REJECTED"
	default:
		return ""
	}
}

func (value TransferStatus) Byte() byte {
	switch value {
	case TransferStatusEXECUTED:
		return 3
	case TransferStatusREJECTED:
		return 4
	default:
		return 0
	}
}

type Operation ag_binary.BorshEnum

const (
	OperationADD Operation = iota
	OperationREMOVE
)

func (value Operation) String() string {
	switch value {
	case OperationADD:
		return "ADD"
	case OperationREMOVE:
		return "REMOVE"
	default:
		return ""
	}
}
