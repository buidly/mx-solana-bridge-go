// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package bridge

import (
	"fmt"
	ag_binary "github.com/gagliardetto/binary"
)

type BridgeSettings struct {
	Bump             uint8
	PausableSettings PausableSettings
	AdminSettings    AdminSettings
	QuorumSettings   QuorumSettings
}

var BridgeSettingsDiscriminator = [8]byte{35, 198, 99, 135, 17, 122, 78, 122}

func (obj BridgeSettings) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(BridgeSettingsDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Bump` param:
	err = encoder.Encode(obj.Bump)
	if err != nil {
		return err
	}
	// Serialize `PausableSettings` param:
	err = encoder.Encode(obj.PausableSettings)
	if err != nil {
		return err
	}
	// Serialize `AdminSettings` param:
	err = encoder.Encode(obj.AdminSettings)
	if err != nil {
		return err
	}
	// Serialize `QuorumSettings` param:
	err = encoder.Encode(obj.QuorumSettings)
	if err != nil {
		return err
	}
	return nil
}

func (obj *BridgeSettings) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(BridgeSettingsDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[35 198 99 135 17 122 78 122]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Bump`:
	err = decoder.Decode(&obj.Bump)
	if err != nil {
		return err
	}
	// Deserialize `PausableSettings`:
	err = decoder.Decode(&obj.PausableSettings)
	if err != nil {
		return err
	}
	// Deserialize `AdminSettings`:
	err = decoder.Decode(&obj.AdminSettings)
	if err != nil {
		return err
	}
	// Deserialize `QuorumSettings`:
	err = decoder.Decode(&obj.QuorumSettings)
	if err != nil {
		return err
	}
	return nil
}

type ExecutedBatch struct {
	IsInitialized         bool
	Nonce                 ag_binary.Uint128
	IsExecuted            bool
	CreatedSlotNumber     uint64
	LastUpdatedSlotNumber uint64
	FirstDepositNonce     ag_binary.Uint128
	LastDepositNonce      ag_binary.Uint128
}

var ExecutedBatchDiscriminator = [8]byte{15, 46, 182, 241, 170, 183, 52, 34}

func (obj ExecutedBatch) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(ExecutedBatchDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `IsInitialized` param:
	err = encoder.Encode(obj.IsInitialized)
	if err != nil {
		return err
	}
	// Serialize `Nonce` param:
	err = encoder.Encode(obj.Nonce)
	if err != nil {
		return err
	}
	// Serialize `IsExecuted` param:
	err = encoder.Encode(obj.IsExecuted)
	if err != nil {
		return err
	}
	// Serialize `CreatedSlotNumber` param:
	err = encoder.Encode(obj.CreatedSlotNumber)
	if err != nil {
		return err
	}
	// Serialize `LastUpdatedSlotNumber` param:
	err = encoder.Encode(obj.LastUpdatedSlotNumber)
	if err != nil {
		return err
	}
	// Serialize `FirstDepositNonce` param:
	err = encoder.Encode(obj.FirstDepositNonce)
	if err != nil {
		return err
	}
	// Serialize `LastDepositNonce` param:
	err = encoder.Encode(obj.LastDepositNonce)
	if err != nil {
		return err
	}
	return nil
}

func (obj *ExecutedBatch) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(ExecutedBatchDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[15 46 182 241 170 183 52 34]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `IsInitialized`:
	err = decoder.Decode(&obj.IsInitialized)
	if err != nil {
		return err
	}
	// Deserialize `Nonce`:
	err = decoder.Decode(&obj.Nonce)
	if err != nil {
		return err
	}
	// Deserialize `IsExecuted`:
	err = decoder.Decode(&obj.IsExecuted)
	if err != nil {
		return err
	}
	// Deserialize `CreatedSlotNumber`:
	err = decoder.Decode(&obj.CreatedSlotNumber)
	if err != nil {
		return err
	}
	// Deserialize `LastUpdatedSlotNumber`:
	err = decoder.Decode(&obj.LastUpdatedSlotNumber)
	if err != nil {
		return err
	}
	// Deserialize `FirstDepositNonce`:
	err = decoder.Decode(&obj.FirstDepositNonce)
	if err != nil {
		return err
	}
	// Deserialize `LastDepositNonce`:
	err = decoder.Decode(&obj.LastDepositNonce)
	if err != nil {
		return err
	}
	return nil
}

type ExecutedTransfer struct {
	DepositNonce      ag_binary.Uint128
	Status            TransferStatus
	CreatedSlotNumber uint64
}

var ExecutedTransferDiscriminator = [8]byte{111, 114, 168, 75, 183, 163, 97, 32}

func (obj ExecutedTransfer) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(ExecutedTransferDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `DepositNonce` param:
	err = encoder.Encode(obj.DepositNonce)
	if err != nil {
		return err
	}
	// Serialize `Status` param:
	err = encoder.Encode(obj.Status)
	if err != nil {
		return err
	}
	// Serialize `CreatedSlotNumber` param:
	err = encoder.Encode(obj.CreatedSlotNumber)
	if err != nil {
		return err
	}
	return nil
}

func (obj *ExecutedTransfer) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(ExecutedTransferDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[111 114 168 75 183 163 97 32]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `DepositNonce`:
	err = decoder.Decode(&obj.DepositNonce)
	if err != nil {
		return err
	}
	// Deserialize `Status`:
	err = decoder.Decode(&obj.Status)
	if err != nil {
		return err
	}
	// Deserialize `CreatedSlotNumber`:
	err = decoder.Decode(&obj.CreatedSlotNumber)
	if err != nil {
		return err
	}
	return nil
}

type RelayerSettings struct {
	Bump     uint8
	Relayers []RelayerDetails
}

var RelayerSettingsDiscriminator = [8]byte{163, 153, 144, 216, 27, 163, 189, 82}

func (obj RelayerSettings) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(RelayerSettingsDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Bump` param:
	err = encoder.Encode(obj.Bump)
	if err != nil {
		return err
	}
	// Serialize `Relayers` param:
	err = encoder.Encode(obj.Relayers)
	if err != nil {
		return err
	}
	return nil
}

func (obj *RelayerSettings) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(RelayerSettingsDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[163 153 144 216 27 163 189 82]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Bump`:
	err = decoder.Decode(&obj.Bump)
	if err != nil {
		return err
	}
	// Deserialize `Relayers`:
	err = decoder.Decode(&obj.Relayers)
	if err != nil {
		return err
	}
	return nil
}
