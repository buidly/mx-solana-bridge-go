// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package bridge

import (
	"bytes"
	"fmt"
	ag_spew "github.com/davecgh/go-spew/spew"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_text "github.com/gagliardetto/solana-go/text"
	ag_treeout "github.com/gagliardetto/treeout"
)

var ProgramID ag_solanago.PublicKey

func SetProgramID(pubkey ag_solanago.PublicKey) {
	ProgramID = pubkey
	ag_solanago.RegisterInstructionDecoder(ProgramID, registryDecodeInstruction)
}

const ProgramName = "Bridge"

func init() {
	if !ProgramID.IsZero() {
		ag_solanago.RegisterInstructionDecoder(ProgramID, registryDecodeInstruction)
	}
}

var (
	Instruction_InitializeSettings = ag_binary.TypeID([8]byte{71, 239, 156, 98, 109, 81, 123, 78})

	Instruction_Pause = ag_binary.TypeID([8]byte{211, 22, 221, 251, 74, 121, 193, 47})

	Instruction_Unpause = ag_binary.TypeID([8]byte{169, 144, 4, 38, 10, 141, 188, 255})

	Instruction_TransferAdmin = ag_binary.TypeID([8]byte{42, 242, 66, 106, 228, 10, 111, 156})

	Instruction_RenounceAdmin = ag_binary.TypeID([8]byte{223, 213, 55, 194, 0, 108, 225, 137})

	Instruction_SetQuorum = ag_binary.TypeID([8]byte{122, 137, 22, 36, 212, 64, 130, 122})

	Instruction_AddRelayer = ag_binary.TypeID([8]byte{184, 240, 94, 199, 19, 71, 21, 192})

	Instruction_RemoveRelayer = ag_binary.TypeID([8]byte{154, 149, 161, 231, 69, 74, 136, 237})

	Instruction_RenounceRelayer = ag_binary.TypeID([8]byte{0, 239, 237, 89, 66, 56, 25, 153})

	Instruction_ExecuteTransfer = ag_binary.TypeID([8]byte{233, 126, 160, 184, 235, 206, 31, 119})
)

// InstructionIDToName returns the name of the instruction given its ID.
func InstructionIDToName(id ag_binary.TypeID) string {
	switch id {
	case Instruction_InitializeSettings:
		return "InitializeSettings"
	case Instruction_Pause:
		return "Pause"
	case Instruction_Unpause:
		return "Unpause"
	case Instruction_TransferAdmin:
		return "TransferAdmin"
	case Instruction_RenounceAdmin:
		return "RenounceAdmin"
	case Instruction_SetQuorum:
		return "SetQuorum"
	case Instruction_AddRelayer:
		return "AddRelayer"
	case Instruction_RemoveRelayer:
		return "RemoveRelayer"
	case Instruction_RenounceRelayer:
		return "RenounceRelayer"
	case Instruction_ExecuteTransfer:
		return "ExecuteTransfer"
	default:
		return ""
	}
}

type Instruction struct {
	ag_binary.BaseVariant
}

func (inst *Instruction) EncodeToTree(parent ag_treeout.Branches) {
	if enToTree, ok := inst.Impl.(ag_text.EncodableToTree); ok {
		enToTree.EncodeToTree(parent)
	} else {
		parent.Child(ag_spew.Sdump(inst))
	}
}

var InstructionImplDef = ag_binary.NewVariantDefinition(
	ag_binary.AnchorTypeIDEncoding,
	[]ag_binary.VariantType{
		{
			"initialize_settings", (*InitializeSettings)(nil),
		},
		{
			"pause", (*Pause)(nil),
		},
		{
			"unpause", (*Unpause)(nil),
		},
		{
			"transfer_admin", (*TransferAdmin)(nil),
		},
		{
			"renounce_admin", (*RenounceAdmin)(nil),
		},
		{
			"set_quorum", (*SetQuorum)(nil),
		},
		{
			"add_relayer", (*AddRelayer)(nil),
		},
		{
			"remove_relayer", (*RemoveRelayer)(nil),
		},
		{
			"renounce_relayer", (*RenounceRelayer)(nil),
		},
		{
			"execute_transfer", (*ExecuteTransfer)(nil),
		},
	},
)

func (inst *Instruction) ProgramID() ag_solanago.PublicKey {
	return ProgramID
}

func (inst *Instruction) Accounts() (out []*ag_solanago.AccountMeta) {
	return inst.Impl.(ag_solanago.AccountsGettable).GetAccounts()
}

func (inst *Instruction) Data() ([]byte, error) {
	buf := new(bytes.Buffer)
	if err := ag_binary.NewBorshEncoder(buf).Encode(inst); err != nil {
		return nil, fmt.Errorf("unable to encode instruction: %w", err)
	}
	return buf.Bytes(), nil
}

func (inst *Instruction) TextEncode(encoder *ag_text.Encoder, option *ag_text.Option) error {
	return encoder.Encode(inst.Impl, option)
}

func (inst *Instruction) UnmarshalWithDecoder(decoder *ag_binary.Decoder) error {
	return inst.BaseVariant.UnmarshalBinaryVariant(decoder, InstructionImplDef)
}

func (inst *Instruction) MarshalWithEncoder(encoder *ag_binary.Encoder) error {
	err := encoder.WriteBytes(inst.TypeID.Bytes(), false)
	if err != nil {
		return fmt.Errorf("unable to write variant type: %w", err)
	}
	return encoder.Encode(inst.Impl)
}

func registryDecodeInstruction(accounts []*ag_solanago.AccountMeta, data []byte) (interface{}, error) {
	inst, err := DecodeInstruction(accounts, data)
	if err != nil {
		return nil, err
	}
	return inst, nil
}

func DecodeInstruction(accounts []*ag_solanago.AccountMeta, data []byte) (*Instruction, error) {
	inst := new(Instruction)
	if err := ag_binary.NewBorshDecoder(data).Decode(inst); err != nil {
		return nil, fmt.Errorf("unable to decode instruction: %w", err)
	}
	if v, ok := inst.Impl.(ag_solanago.AccountsSettable); ok {
		err := v.SetAccounts(accounts)
		if err != nil {
			return nil, fmt.Errorf("unable to set accounts for instruction: %w", err)
		}
	}
	return inst, nil
}
