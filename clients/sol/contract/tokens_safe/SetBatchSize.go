// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package tokens_safe

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// SetBatchSize is the `setBatchSize` instruction.
type SetBatchSize struct {
	NewBatchSize *uint16

	// [0] = [WRITE, SIGNER] adminAuthority
	//
	// [1] = [WRITE] safeSettings
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewSetBatchSizeInstructionBuilder creates a new `SetBatchSize` instruction builder.
func NewSetBatchSizeInstructionBuilder() *SetBatchSize {
	nd := &SetBatchSize{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 2),
	}
	return nd
}

// SetNewBatchSize sets the "newBatchSize" parameter.
func (inst *SetBatchSize) SetNewBatchSize(newBatchSize uint16) *SetBatchSize {
	inst.NewBatchSize = &newBatchSize
	return inst
}

// SetAdminAuthorityAccount sets the "adminAuthority" account.
func (inst *SetBatchSize) SetAdminAuthorityAccount(adminAuthority ag_solanago.PublicKey) *SetBatchSize {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(adminAuthority).WRITE().SIGNER()
	return inst
}

// GetAdminAuthorityAccount gets the "adminAuthority" account.
func (inst *SetBatchSize) GetAdminAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetSafeSettingsAccount sets the "safeSettings" account.
func (inst *SetBatchSize) SetSafeSettingsAccount(safeSettings ag_solanago.PublicKey) *SetBatchSize {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(safeSettings).WRITE()
	return inst
}

// GetSafeSettingsAccount gets the "safeSettings" account.
func (inst *SetBatchSize) GetSafeSettingsAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

func (inst SetBatchSize) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_SetBatchSize,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst SetBatchSize) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *SetBatchSize) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.NewBatchSize == nil {
			return errors.New("NewBatchSize parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.AdminAuthority is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.SafeSettings is not set")
		}
	}
	return nil
}

func (inst *SetBatchSize) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("SetBatchSize")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("NewBatchSize", *inst.NewBatchSize))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=2]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("adminAuthority", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("  safeSettings", inst.AccountMetaSlice.Get(1)))
					})
				})
		})
}

func (obj SetBatchSize) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `NewBatchSize` param:
	err = encoder.Encode(obj.NewBatchSize)
	if err != nil {
		return err
	}
	return nil
}
func (obj *SetBatchSize) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `NewBatchSize`:
	err = decoder.Decode(&obj.NewBatchSize)
	if err != nil {
		return err
	}
	return nil
}

// NewSetBatchSizeInstruction declares a new SetBatchSize instruction with the provided parameters and accounts.
func NewSetBatchSizeInstruction(
	// Parameters:
	newBatchSize uint16,
	// Accounts:
	adminAuthority ag_solanago.PublicKey,
	safeSettings ag_solanago.PublicKey) *SetBatchSize {
	return NewSetBatchSizeInstructionBuilder().
		SetNewBatchSize(newBatchSize).
		SetAdminAuthorityAccount(adminAuthority).
		SetSafeSettingsAccount(safeSettings)
}
