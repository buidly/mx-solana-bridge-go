// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package tokens_safe

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// WhitelistToken is the `whitelistToken` instruction.
type WhitelistToken struct {
	MinAmount *uint64
	MaxAmount *uint64

	// [0] = [WRITE, SIGNER] adminAuthority
	//
	// [1] = [WRITE] safeSettings
	//
	// [2] = [WRITE] tokenMint
	//
	// [3] = [WRITE] whitelistedToken
	//
	// [4] = [] systemProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewWhitelistTokenInstructionBuilder creates a new `WhitelistToken` instruction builder.
func NewWhitelistTokenInstructionBuilder() *WhitelistToken {
	nd := &WhitelistToken{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 5),
	}
	return nd
}

// SetMinAmount sets the "minAmount" parameter.
func (inst *WhitelistToken) SetMinAmount(minAmount uint64) *WhitelistToken {
	inst.MinAmount = &minAmount
	return inst
}

// SetMaxAmount sets the "maxAmount" parameter.
func (inst *WhitelistToken) SetMaxAmount(maxAmount uint64) *WhitelistToken {
	inst.MaxAmount = &maxAmount
	return inst
}

// SetAdminAuthorityAccount sets the "adminAuthority" account.
func (inst *WhitelistToken) SetAdminAuthorityAccount(adminAuthority ag_solanago.PublicKey) *WhitelistToken {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(adminAuthority).WRITE().SIGNER()
	return inst
}

// GetAdminAuthorityAccount gets the "adminAuthority" account.
func (inst *WhitelistToken) GetAdminAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetSafeSettingsAccount sets the "safeSettings" account.
func (inst *WhitelistToken) SetSafeSettingsAccount(safeSettings ag_solanago.PublicKey) *WhitelistToken {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(safeSettings).WRITE()
	return inst
}

// GetSafeSettingsAccount gets the "safeSettings" account.
func (inst *WhitelistToken) GetSafeSettingsAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetTokenMintAccount sets the "tokenMint" account.
func (inst *WhitelistToken) SetTokenMintAccount(tokenMint ag_solanago.PublicKey) *WhitelistToken {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(tokenMint).WRITE()
	return inst
}

// GetTokenMintAccount gets the "tokenMint" account.
func (inst *WhitelistToken) GetTokenMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetWhitelistedTokenAccount sets the "whitelistedToken" account.
func (inst *WhitelistToken) SetWhitelistedTokenAccount(whitelistedToken ag_solanago.PublicKey) *WhitelistToken {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(whitelistedToken).WRITE()
	return inst
}

// GetWhitelistedTokenAccount gets the "whitelistedToken" account.
func (inst *WhitelistToken) GetWhitelistedTokenAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *WhitelistToken) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *WhitelistToken {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *WhitelistToken) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

func (inst WhitelistToken) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_WhitelistToken,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst WhitelistToken) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *WhitelistToken) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.MinAmount == nil {
			return errors.New("MinAmount parameter is not set")
		}
		if inst.MaxAmount == nil {
			return errors.New("MaxAmount parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.AdminAuthority is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.SafeSettings is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.TokenMint is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.WhitelistedToken is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
	}
	return nil
}

func (inst *WhitelistToken) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("WhitelistToken")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=2]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("MinAmount", *inst.MinAmount))
						paramsBranch.Child(ag_format.Param("MaxAmount", *inst.MaxAmount))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=5]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("  adminAuthority", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("    safeSettings", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("       tokenMint", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("whitelistedToken", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("   systemProgram", inst.AccountMetaSlice.Get(4)))
					})
				})
		})
}

func (obj WhitelistToken) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `MinAmount` param:
	err = encoder.Encode(obj.MinAmount)
	if err != nil {
		return err
	}
	// Serialize `MaxAmount` param:
	err = encoder.Encode(obj.MaxAmount)
	if err != nil {
		return err
	}
	return nil
}
func (obj *WhitelistToken) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `MinAmount`:
	err = decoder.Decode(&obj.MinAmount)
	if err != nil {
		return err
	}
	// Deserialize `MaxAmount`:
	err = decoder.Decode(&obj.MaxAmount)
	if err != nil {
		return err
	}
	return nil
}

// NewWhitelistTokenInstruction declares a new WhitelistToken instruction with the provided parameters and accounts.
func NewWhitelistTokenInstruction(
	// Parameters:
	minAmount uint64,
	maxAmount uint64,
	// Accounts:
	adminAuthority ag_solanago.PublicKey,
	safeSettings ag_solanago.PublicKey,
	tokenMint ag_solanago.PublicKey,
	whitelistedToken ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey) *WhitelistToken {
	return NewWhitelistTokenInstructionBuilder().
		SetMinAmount(minAmount).
		SetMaxAmount(maxAmount).
		SetAdminAuthorityAccount(adminAuthority).
		SetSafeSettingsAccount(safeSettings).
		SetTokenMintAccount(tokenMint).
		SetWhitelistedTokenAccount(whitelistedToken).
		SetSystemProgramAccount(systemProgram)
}
