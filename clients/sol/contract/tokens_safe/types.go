// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package tokens_safe

import (
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
)

type AdminSettings struct {
	AdminAuthority ag_solanago.PublicKey
}

func (obj AdminSettings) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `AdminAuthority` param:
	err = encoder.Encode(obj.AdminAuthority)
	if err != nil {
		return err
	}
	return nil
}

func (obj *AdminSettings) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `AdminAuthority`:
	err = decoder.Decode(&obj.AdminAuthority)
	if err != nil {
		return err
	}
	return nil
}

type BatchSettings struct {
	BatchSize           uint16
	BatchSlotLimit      uint16
	CurrentBatchNonce   ag_binary.Uint128
	CurrentDepositNonce ag_binary.Uint128
}

func (obj BatchSettings) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `BatchSize` param:
	err = encoder.Encode(obj.BatchSize)
	if err != nil {
		return err
	}
	// Serialize `BatchSlotLimit` param:
	err = encoder.Encode(obj.BatchSlotLimit)
	if err != nil {
		return err
	}
	// Serialize `CurrentBatchNonce` param:
	err = encoder.Encode(obj.CurrentBatchNonce)
	if err != nil {
		return err
	}
	// Serialize `CurrentDepositNonce` param:
	err = encoder.Encode(obj.CurrentDepositNonce)
	if err != nil {
		return err
	}
	return nil
}

func (obj *BatchSettings) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `BatchSize`:
	err = decoder.Decode(&obj.BatchSize)
	if err != nil {
		return err
	}
	// Deserialize `BatchSlotLimit`:
	err = decoder.Decode(&obj.BatchSlotLimit)
	if err != nil {
		return err
	}
	// Deserialize `CurrentBatchNonce`:
	err = decoder.Decode(&obj.CurrentBatchNonce)
	if err != nil {
		return err
	}
	// Deserialize `CurrentDepositNonce`:
	err = decoder.Decode(&obj.CurrentDepositNonce)
	if err != nil {
		return err
	}
	return nil
}

type BridgeSettings struct {
	BridgeAuthority ag_solanago.PublicKey
}

func (obj BridgeSettings) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `BridgeAuthority` param:
	err = encoder.Encode(obj.BridgeAuthority)
	if err != nil {
		return err
	}
	return nil
}

func (obj *BridgeSettings) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `BridgeAuthority`:
	err = decoder.Decode(&obj.BridgeAuthority)
	if err != nil {
		return err
	}
	return nil
}

type PausableSettings struct {
	IsPaused bool
}

func (obj PausableSettings) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `IsPaused` param:
	err = encoder.Encode(obj.IsPaused)
	if err != nil {
		return err
	}
	return nil
}

func (obj *PausableSettings) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `IsPaused`:
	err = decoder.Decode(&obj.IsPaused)
	if err != nil {
		return err
	}
	return nil
}

type PausableError ag_binary.BorshEnum

const (
	PausableErrorPaused PausableError = iota
	PausableErrorNotPaused
)

func (value PausableError) String() string {
	switch value {
	case PausableErrorPaused:
		return "Paused"
	case PausableErrorNotPaused:
		return "NotPaused"
	default:
		return ""
	}
}

type BridgeError ag_binary.BorshEnum

const (
	BridgeErrorAddressNotValid BridgeError = iota
	BridgeErrorAddressNotDifferent
	BridgeErrorNotBridge
)

func (value BridgeError) String() string {
	switch value {
	case BridgeErrorAddressNotValid:
		return "AddressNotValid"
	case BridgeErrorAddressNotDifferent:
		return "AddressNotDifferent"
	case BridgeErrorNotBridge:
		return "NotBridge"
	default:
		return ""
	}
}

type BatchError ag_binary.BorshEnum

const (
	BatchErrorBatchSizeTooHigh BatchError = iota
)

func (value BatchError) String() string {
	switch value {
	case BatchErrorBatchSizeTooHigh:
		return "BatchSizeTooHigh"
	default:
		return ""
	}
}

type WhitelistedTokenError ag_binary.BorshEnum

const (
	WhitelistedTokenErrorUnsupportedToken WhitelistedTokenError = iota
	WhitelistedTokenErrorDepositTooLow
	WhitelistedTokenErrorDepositTooHigh
	WhitelistedTokenErrorWithdrawalTooBig
)

func (value WhitelistedTokenError) String() string {
	switch value {
	case WhitelistedTokenErrorUnsupportedToken:
		return "UnsupportedToken"
	case WhitelistedTokenErrorDepositTooLow:
		return "DepositTooLow"
	case WhitelistedTokenErrorDepositTooHigh:
		return "DepositTooHigh"
	case WhitelistedTokenErrorWithdrawalTooBig:
		return "WithdrawalTooBig"
	default:
		return ""
	}
}
