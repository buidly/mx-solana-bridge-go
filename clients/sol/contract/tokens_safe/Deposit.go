// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package tokens_safe

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// DepositInstr is the `deposit` instruction.
type DepositInstr struct {
	Amount    *uint64
	Recipient *[32]uint8

	// [0] = [WRITE, SIGNER] user
	//
	// [1] = [WRITE] safeSettings
	//
	// [2] = [WRITE] tokenMint
	//
	// [3] = [WRITE] whitelistedToken
	//
	// [4] = [WRITE] sendFrom
	//
	// [5] = [WRITE] sendTo
	//
	// [6] = [WRITE] currentBatch
	//
	// [7] = [WRITE] nextBatch
	//
	// [8] = [WRITE] deposit
	//
	// [9] = [] tokenProgram
	//
	// [10] = [] associatedTokenProgram
	//
	// [11] = [] systemProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewDepositInstructionBuilder creates a new `DepositInstr` instruction builder.
func NewDepositInstructionBuilder() *DepositInstr {
	nd := &DepositInstr{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 12),
	}
	return nd
}

// SetAmount sets the "amount" parameter.
func (inst *DepositInstr) SetAmount(amount uint64) *DepositInstr {
	inst.Amount = &amount
	return inst
}

// SetRecipient sets the "recipient" parameter.
func (inst *DepositInstr) SetRecipient(recipient [32]uint8) *DepositInstr {
	inst.Recipient = &recipient
	return inst
}

// SetUserAccount sets the "user" account.
func (inst *DepositInstr) SetUserAccount(user ag_solanago.PublicKey) *DepositInstr {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(user).WRITE().SIGNER()
	return inst
}

// GetUserAccount gets the "user" account.
func (inst *DepositInstr) GetUserAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetSafeSettingsAccount sets the "safeSettings" account.
func (inst *DepositInstr) SetSafeSettingsAccount(safeSettings ag_solanago.PublicKey) *DepositInstr {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(safeSettings).WRITE()
	return inst
}

// GetSafeSettingsAccount gets the "safeSettings" account.
func (inst *DepositInstr) GetSafeSettingsAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetTokenMintAccount sets the "tokenMint" account.
func (inst *DepositInstr) SetTokenMintAccount(tokenMint ag_solanago.PublicKey) *DepositInstr {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(tokenMint).WRITE()
	return inst
}

// GetTokenMintAccount gets the "tokenMint" account.
func (inst *DepositInstr) GetTokenMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetWhitelistedTokenAccount sets the "whitelistedToken" account.
func (inst *DepositInstr) SetWhitelistedTokenAccount(whitelistedToken ag_solanago.PublicKey) *DepositInstr {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(whitelistedToken).WRITE()
	return inst
}

// GetWhitelistedTokenAccount gets the "whitelistedToken" account.
func (inst *DepositInstr) GetWhitelistedTokenAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetSendFromAccount sets the "sendFrom" account.
func (inst *DepositInstr) SetSendFromAccount(sendFrom ag_solanago.PublicKey) *DepositInstr {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(sendFrom).WRITE()
	return inst
}

// GetSendFromAccount gets the "sendFrom" account.
func (inst *DepositInstr) GetSendFromAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetSendToAccount sets the "sendTo" account.
func (inst *DepositInstr) SetSendToAccount(sendTo ag_solanago.PublicKey) *DepositInstr {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(sendTo).WRITE()
	return inst
}

// GetSendToAccount gets the "sendTo" account.
func (inst *DepositInstr) GetSendToAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetCurrentBatchAccount sets the "currentBatch" account.
func (inst *DepositInstr) SetCurrentBatchAccount(currentBatch ag_solanago.PublicKey) *DepositInstr {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(currentBatch).WRITE()
	return inst
}

// GetCurrentBatchAccount gets the "currentBatch" account.
func (inst *DepositInstr) GetCurrentBatchAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetNextBatchAccount sets the "nextBatch" account.
func (inst *DepositInstr) SetNextBatchAccount(nextBatch ag_solanago.PublicKey) *DepositInstr {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(nextBatch).WRITE()
	return inst
}

// GetNextBatchAccount gets the "nextBatch" account.
func (inst *DepositInstr) GetNextBatchAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetDepositAccount sets the "deposit" account.
func (inst *DepositInstr) SetDepositAccount(deposit ag_solanago.PublicKey) *DepositInstr {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(deposit).WRITE()
	return inst
}

// GetDepositAccount gets the "deposit" account.
func (inst *DepositInstr) GetDepositAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *DepositInstr) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *DepositInstr {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *DepositInstr) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetAssociatedTokenProgramAccount sets the "associatedTokenProgram" account.
func (inst *DepositInstr) SetAssociatedTokenProgramAccount(associatedTokenProgram ag_solanago.PublicKey) *DepositInstr {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(associatedTokenProgram)
	return inst
}

// GetAssociatedTokenProgramAccount gets the "associatedTokenProgram" account.
func (inst *DepositInstr) GetAssociatedTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *DepositInstr) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *DepositInstr {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *DepositInstr) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(11)
}

func (inst DepositInstr) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_Deposit,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst DepositInstr) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *DepositInstr) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Amount == nil {
			return errors.New("Amount parameter is not set")
		}
		if inst.Recipient == nil {
			return errors.New("Recipient parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.User is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.SafeSettings is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.TokenMint is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.WhitelistedToken is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.SendFrom is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.SendTo is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.CurrentBatch is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.NextBatch is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.DepositInstr is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.AssociatedTokenProgram is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
	}
	return nil
}

func (inst *DepositInstr) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("DepositInstr")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=2]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("   Amount", *inst.Amount))
						paramsBranch.Child(ag_format.Param("Recipient", *inst.Recipient))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=12]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("                  user", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("          safeSettings", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("             tokenMint", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("      whitelistedToken", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("              sendFrom", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("                sendTo", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("          currentBatch", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("             nextBatch", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("               deposit", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("          tokenProgram", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("associatedTokenProgram", inst.AccountMetaSlice.Get(10)))
						accountsBranch.Child(ag_format.Meta("         systemProgram", inst.AccountMetaSlice.Get(11)))
					})
				})
		})
}

func (obj DepositInstr) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Amount` param:
	err = encoder.Encode(obj.Amount)
	if err != nil {
		return err
	}
	// Serialize `Recipient` param:
	err = encoder.Encode(obj.Recipient)
	if err != nil {
		return err
	}
	return nil
}
func (obj *DepositInstr) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Amount`:
	err = decoder.Decode(&obj.Amount)
	if err != nil {
		return err
	}
	// Deserialize `Recipient`:
	err = decoder.Decode(&obj.Recipient)
	if err != nil {
		return err
	}
	return nil
}

// NewDepositInstruction declares a new DepositInstr instruction with the provided parameters and accounts.
func NewDepositInstruction(
	// Parameters:
	amount uint64,
	recipient [32]uint8,
	// Accounts:
	user ag_solanago.PublicKey,
	safeSettings ag_solanago.PublicKey,
	tokenMint ag_solanago.PublicKey,
	whitelistedToken ag_solanago.PublicKey,
	sendFrom ag_solanago.PublicKey,
	sendTo ag_solanago.PublicKey,
	currentBatch ag_solanago.PublicKey,
	nextBatch ag_solanago.PublicKey,
	deposit ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey,
	associatedTokenProgram ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey) *DepositInstr {
	return NewDepositInstructionBuilder().
		SetAmount(amount).
		SetRecipient(recipient).
		SetUserAccount(user).
		SetSafeSettingsAccount(safeSettings).
		SetTokenMintAccount(tokenMint).
		SetWhitelistedTokenAccount(whitelistedToken).
		SetSendFromAccount(sendFrom).
		SetSendToAccount(sendTo).
		SetCurrentBatchAccount(currentBatch).
		SetNextBatchAccount(nextBatch).
		SetDepositAccount(deposit).
		SetTokenProgramAccount(tokenProgram).
		SetAssociatedTokenProgramAccount(associatedTokenProgram).
		SetSystemProgramAccount(systemProgram)
}
