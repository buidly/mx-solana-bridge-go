// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package tokens_safe

import (
	"fmt"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
)

type Batch struct {
	IsInitialized         bool
	Nonce                 ag_binary.Uint128
	SlotNumber            uint64
	LastUpdatedSlotNumber uint64
	DepositsCount         uint16
	FirstDepositNonce     ag_binary.Uint128
}

var BatchDiscriminator = [8]byte{156, 194, 70, 44, 22, 88, 137, 44}

func (obj Batch) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(BatchDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `IsInitialized` param:
	err = encoder.Encode(obj.IsInitialized)
	if err != nil {
		return err
	}
	// Serialize `Nonce` param:
	err = encoder.Encode(obj.Nonce)
	if err != nil {
		return err
	}
	// Serialize `SlotNumber` param:
	err = encoder.Encode(obj.SlotNumber)
	if err != nil {
		return err
	}
	// Serialize `LastUpdatedSlotNumber` param:
	err = encoder.Encode(obj.LastUpdatedSlotNumber)
	if err != nil {
		return err
	}
	// Serialize `DepositsCount` param:
	err = encoder.Encode(obj.DepositsCount)
	if err != nil {
		return err
	}
	// Serialize `FirstDepositNonce` param:
	err = encoder.Encode(obj.FirstDepositNonce)
	if err != nil {
		return err
	}
	return nil
}

func (obj *Batch) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(BatchDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[156 194 70 44 22 88 137 44]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `IsInitialized`:
	err = decoder.Decode(&obj.IsInitialized)
	if err != nil {
		return err
	}
	// Deserialize `Nonce`:
	err = decoder.Decode(&obj.Nonce)
	if err != nil {
		return err
	}
	// Deserialize `SlotNumber`:
	err = decoder.Decode(&obj.SlotNumber)
	if err != nil {
		return err
	}
	// Deserialize `LastUpdatedSlotNumber`:
	err = decoder.Decode(&obj.LastUpdatedSlotNumber)
	if err != nil {
		return err
	}
	// Deserialize `DepositsCount`:
	err = decoder.Decode(&obj.DepositsCount)
	if err != nil {
		return err
	}
	// Deserialize `FirstDepositNonce`:
	err = decoder.Decode(&obj.FirstDepositNonce)
	if err != nil {
		return err
	}
	return nil
}

type Deposit struct {
	Nonce     ag_binary.Uint128
	TokenMint ag_solanago.PublicKey
	Amount    uint64
	Depositor ag_solanago.PublicKey
	Recipient [32]uint8
}

var DepositDiscriminator = [8]byte{148, 146, 121, 66, 207, 173, 21, 227}

func (obj Deposit) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(DepositDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Nonce` param:
	err = encoder.Encode(obj.Nonce)
	if err != nil {
		return err
	}
	// Serialize `TokenMint` param:
	err = encoder.Encode(obj.TokenMint)
	if err != nil {
		return err
	}
	// Serialize `Amount` param:
	err = encoder.Encode(obj.Amount)
	if err != nil {
		return err
	}
	// Serialize `Depositor` param:
	err = encoder.Encode(obj.Depositor)
	if err != nil {
		return err
	}
	// Serialize `Recipient` param:
	err = encoder.Encode(obj.Recipient)
	if err != nil {
		return err
	}
	return nil
}

func (obj *Deposit) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(DepositDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[148 146 121 66 207 173 21 227]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Nonce`:
	err = decoder.Decode(&obj.Nonce)
	if err != nil {
		return err
	}
	// Deserialize `TokenMint`:
	err = decoder.Decode(&obj.TokenMint)
	if err != nil {
		return err
	}
	// Deserialize `Amount`:
	err = decoder.Decode(&obj.Amount)
	if err != nil {
		return err
	}
	// Deserialize `Depositor`:
	err = decoder.Decode(&obj.Depositor)
	if err != nil {
		return err
	}
	// Deserialize `Recipient`:
	err = decoder.Decode(&obj.Recipient)
	if err != nil {
		return err
	}
	return nil
}

type SafeSettings struct {
	Bump             uint8
	PausableSettings PausableSettings
	AdminSettings    AdminSettings
	BridgeSettings   BridgeSettings
	BatchSettings    BatchSettings
}

var SafeSettingsDiscriminator = [8]byte{177, 155, 106, 92, 121, 53, 41, 70}

func (obj SafeSettings) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(SafeSettingsDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Bump` param:
	err = encoder.Encode(obj.Bump)
	if err != nil {
		return err
	}
	// Serialize `PausableSettings` param:
	err = encoder.Encode(obj.PausableSettings)
	if err != nil {
		return err
	}
	// Serialize `AdminSettings` param:
	err = encoder.Encode(obj.AdminSettings)
	if err != nil {
		return err
	}
	// Serialize `BridgeSettings` param:
	err = encoder.Encode(obj.BridgeSettings)
	if err != nil {
		return err
	}
	// Serialize `BatchSettings` param:
	err = encoder.Encode(obj.BatchSettings)
	if err != nil {
		return err
	}
	return nil
}

func (obj *SafeSettings) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(SafeSettingsDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[177 155 106 92 121 53 41 70]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Bump`:
	err = decoder.Decode(&obj.Bump)
	if err != nil {
		return err
	}
	// Deserialize `PausableSettings`:
	err = decoder.Decode(&obj.PausableSettings)
	if err != nil {
		return err
	}
	// Deserialize `AdminSettings`:
	err = decoder.Decode(&obj.AdminSettings)
	if err != nil {
		return err
	}
	// Deserialize `BridgeSettings`:
	err = decoder.Decode(&obj.BridgeSettings)
	if err != nil {
		return err
	}
	// Deserialize `BatchSettings`:
	err = decoder.Decode(&obj.BatchSettings)
	if err != nil {
		return err
	}
	return nil
}

type WhitelistedToken struct {
	Bump          uint8
	IsWhitelisted bool
	MinAmount     uint64
	MaxAmount     uint64
	Balance       uint64
}

var WhitelistedTokenDiscriminator = [8]byte{217, 124, 32, 114, 40, 167, 143, 233}

func (obj WhitelistedToken) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(WhitelistedTokenDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Bump` param:
	err = encoder.Encode(obj.Bump)
	if err != nil {
		return err
	}
	// Serialize `IsWhitelisted` param:
	err = encoder.Encode(obj.IsWhitelisted)
	if err != nil {
		return err
	}
	// Serialize `MinAmount` param:
	err = encoder.Encode(obj.MinAmount)
	if err != nil {
		return err
	}
	// Serialize `MaxAmount` param:
	err = encoder.Encode(obj.MaxAmount)
	if err != nil {
		return err
	}
	// Serialize `Balance` param:
	err = encoder.Encode(obj.Balance)
	if err != nil {
		return err
	}
	return nil
}

func (obj *WhitelistedToken) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(WhitelistedTokenDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[217 124 32 114 40 167 143 233]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Bump`:
	err = decoder.Decode(&obj.Bump)
	if err != nil {
		return err
	}
	// Deserialize `IsWhitelisted`:
	err = decoder.Decode(&obj.IsWhitelisted)
	if err != nil {
		return err
	}
	// Deserialize `MinAmount`:
	err = decoder.Decode(&obj.MinAmount)
	if err != nil {
		return err
	}
	// Deserialize `MaxAmount`:
	err = decoder.Decode(&obj.MaxAmount)
	if err != nil {
		return err
	}
	// Deserialize `Balance`:
	err = decoder.Decode(&obj.Balance)
	if err != nil {
		return err
	}
	return nil
}
